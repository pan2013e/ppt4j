package ppt4j.database;

import ppt4j.annotation.Database;
import ppt4j.util.FileUtils;

import java.io.Serializable;

@SuppressWarnings("unused")
public interface Vulnerability extends Serializable {

    default int getDatabaseId() {
        return this.getClass().getAnnotation(Database.class).id();
    }

    default String getCVEId() {
        return this.getClass().getAnnotation(Database.class).value();
    }

    default String getProjectName() {
        return getRepoUrl().substring(getRepoUrl().lastIndexOf('/') + 1);
    }

    String getRepoUrl();

    String getPatchCommitHash();

    default String getDiffUrl() {
        return getRepoUrl() + "/commit/" + getPatchCommitHash() + ".diff";
    }

    String getJavaSrcTopLevelDir();

    String getClassesTopLevelDir();

    default String[] getThirdPartySrcDirs() {
        return new String[0];
    }

    default String[] getThirdPartyLibDirs() {
        return new String[0];
    }

    default boolean shouldScanAllModules() {
        return false;
    }

    default String[] getIgnoredFilePatterns() {
        return new String[]{
                ".*Test.*", ".*Issue.*", ".*src/test/.*", ".*/package-info\\.java",
        };
    }

    default String[] getRequiredFilePatterns() {
        return new String[]{
                ".*\\.java"
        };
    }

    default void dump(String path) {
        FileUtils.serializeObject(this, path);
    }

    static Vulnerability load(String path) {
        return FileUtils.deserializeObject(Vulnerability.class, path);
    }

}
