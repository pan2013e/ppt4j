package ppt4j.database;

import ppt4j.annotation.Database;
import ppt4j.util.FileUtils;

import java.io.Serializable;

@SuppressWarnings("unused")
public interface Vulnerability extends Serializable {

    /**
     * This method retrieves the database id associated with the current class by getting the Database annotation and returning its id.
     * 
     * @return the database id as an integer
     */
    default int getDatabaseId() {
        // Get the Database annotation of the current class
        Database annotation = this.getClass().getAnnotation(Database.class);
        
        // Return the id value from the Database annotation
        return annotation.id();
    }

    /**
     * This method returns the CVE ID of the current class by retrieving the value
     * specified in the Database annotation associated with the class.
     *
     * @return the CVE ID of the current class
     */
    default String getCVEId() {
        // Get the Database annotation associated with the current class
        Database databaseAnnotation = this.getClass().getAnnotation(Database.class);
        
        // Return the value specified in the Database annotation
        return databaseAnnotation.value();
    }

    /**
     * This method retrieves the project name from the repository URL by extracting the substring
     * that comes after the last occurrence of the '/' character in the URL.
     * 
     * @return the project name extracted from the repository URL
     */
    default String getProjectName() {
        // Get the repository URL
        String repoUrl = getRepoUrl();
        
        // Find the index of the last occurrence of '/'
        int lastIndex = repoUrl.lastIndexOf('/') + 1;
        
        // Extract the project name from the repository URL
        String projectName = repoUrl.substring(lastIndex);
        
        return projectName;
    }

    /**
     * This method returns the URL of the repository.
     * The URL is typically used to access the repository for various operations such as cloning, fetching, and pushing.
     * 
     * @return the URL of the repository
     */
    String getRepoUrl();

    /**
     * This method returns the commit hash of the latest patch applied to the software.
     * It retrieves the commit hash from a designated source, such as a version control system.
     *
     * @return The commit hash of the latest patch applied to the software.
     */
    String getPatchCommitHash();

    /**
     * This method constructs a URL that links to the diff of the commit associated with the patch.
     * It concatenates the repository URL, the commit hash of the patch, and the file extension ".diff".
     *
     * @return the URL string pointing to the diff of the commit associated with the patch
     */
    default String getDiffUrl() {
        // Concatenate the repository URL, commit hash, and file extension to construct the diff URL
        return getRepoUrl() + "/commit/" + getPatchCommitHash() + ".diff";
    }

    /**
     * This method retrieves the top-level directory where the Java source files are located.
     * 
     * @return the top-level directory path for Java source files
     */
    String getJavaSrcTopLevelDir();

    /**
     * This method returns the top-level directory where all the classes are located.
     * 
     * @return the top-level directory where all the classes are located
     */
    String getClassesTopLevelDir();

    /**
     * This method returns an array of third party source directories.
     * 
     * @return an array of strings representing third party source directories
     */
    default String[] getThirdPartySrcDirs() {
        // Return an empty array since there are no third party source directories by default
        return new String[0];
    }

    /**
     * This method returns an array of directories where third-party libraries are stored.
     * Since there are no third-party libraries by default, an empty array is returned.
     * 
     * @return an array of directories where third-party libraries are stored
     */
    default String[] getThirdPartyLibDirs() {
        // Since there are no third-party libraries by default, return an empty array
        return new String[0];
    }

    /**
     * This method determines whether all modules should be scanned.
     *
     * @return false indicating that not all modules should be scanned
     */
    default boolean shouldScanAllModules() {
        // Return false as the default behavior is to not scan all modules
        return false;
    }

    /**
     * Returns an array of file patterns that are ignored during file processing.
     * These patterns include files with names containing "Test", "Issue", files in src/test directory,
     * and package-info.java files.
     *
     * @return an array of ignored file patterns
     */
    default String[] getIgnoredFilePatterns() {
        // Return an array of ignored file patterns
        return new String[]{
            ".*Test.*", ".*Issue.*", ".*src/test/.*", ".*/package-info\\.java",
        };
    }

    /**
     * Returns an array of required file patterns.
     * These patterns are used to filter files based on their names.
     * This method specifically returns a pattern for Java files.
     *
     * @return an array of required file patterns
     */
    default String[] getRequiredFilePatterns() {
        // Return an array containing the pattern for Java files
        return new String[]{
                ".*\\.java"
        };
    }

    /**
     * Serializes the current object and writes it to the specified file path.
     *
     * @param path the file path where the serialized object will be written
     */
    default void dump(String path) {
        // Serialize the current object using FileUtils.serializeObject method
        FileUtils.serializeObject(this, path);
    }

    /**
     * Loads a Vulnerability object from the specified file path using deserialization.
     * 
     * @param path the file path of the serialized Vulnerability object
     * @return the deserialized Vulnerability object
     */
    static Vulnerability load(String path) {
        // Deserialize the Vulnerability object using the FileUtils class
        return FileUtils.deserializeObject(Vulnerability.class, path);
    }

}
