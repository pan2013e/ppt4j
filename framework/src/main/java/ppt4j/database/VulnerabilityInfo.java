package ppt4j.database;

import ppt4j.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.ToString;
import lombok.extern.log4j.Log4j;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
@Log4j
@SuppressWarnings("unused")
public class VulnerabilityInfo {

    public static VulnerabilityInfo fromJSON(InputStream stream)
            throws IOException {
        return new ObjectMapper()
                .readValue(stream.readAllBytes(), VulnerabilityInfo.class);
    }

    public void dumpJSON(String path) throws IOException {
        new ObjectMapper().writeValue(new File(path), this);
    }

    public String   vul_id;
    public String   cve_id;
    public String   project;
    public String   project_url;
    public String   build_system;
    public String   src_classes_dir;
    public String   human_patch_url;
    public String   fixing_commit_hash;

    @Nullable
    public boolean  should_scan_all_modules;
    @Nullable
    public String[] third_party_src_dirs;
    @Nullable
    public String[] third_party_lib_dirs;
    @Nullable
    public String   src_top_level_dir;
    
    public boolean isEmpty() {
        Field[] fields = this.getClass().getDeclaredFields();
        for (Field field : fields) {
            if(field.isAnnotationPresent(Nullable.class)) {
                continue;
            }
            try {
                if(field.get(this) == null || Objects.equals(field.get(this), "")) {
                    return true;
                }
            } catch (IllegalAccessException e) {
                log.error(e);
                return true;
            }
        }
        return false;
    }

}
